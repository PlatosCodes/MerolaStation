// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: trade_transaction.sql

package db

import (
	"context"
)

const createTradeTransaction = `-- name: CreateTradeTransaction :one
INSERT INTO trade_transactions (
    offered_train, offered_train_owner, 
    requested_train, requested_train_owner
) VALUES (
  $1, $2, $3, $4
) RETURNING id, offered_train, offered_train_owner, requested_train, requested_train_owner, created_at
`

type CreateTradeTransactionParams struct {
	OfferedTrain        int64 `json:"offered_train"`
	OfferedTrainOwner   int64 `json:"offered_train_owner"`
	RequestedTrain      int64 `json:"requested_train"`
	RequestedTrainOwner int64 `json:"requested_train_owner"`
}

func (q *Queries) CreateTradeTransaction(ctx context.Context, arg CreateTradeTransactionParams) (TradeTransaction, error) {
	row := q.db.QueryRowContext(ctx, createTradeTransaction,
		arg.OfferedTrain,
		arg.OfferedTrainOwner,
		arg.RequestedTrain,
		arg.RequestedTrainOwner,
	)
	var i TradeTransaction
	err := row.Scan(
		&i.ID,
		&i.OfferedTrain,
		&i.OfferedTrainOwner,
		&i.RequestedTrain,
		&i.RequestedTrainOwner,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTradeTransaction = `-- name: DeleteTradeTransaction :exec
DELETE from trade_transactions WHERE id = $1
`

func (q *Queries) DeleteTradeTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTradeTransaction, id)
	return err
}

const getTradeTransaction = `-- name: GetTradeTransaction :one
SELECT id, offered_train, offered_train_owner, requested_train, requested_train_owner, created_at FROM trade_transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTradeTransaction(ctx context.Context, id int64) (TradeTransaction, error) {
	row := q.db.QueryRowContext(ctx, getTradeTransaction, id)
	var i TradeTransaction
	err := row.Scan(
		&i.ID,
		&i.OfferedTrain,
		&i.OfferedTrainOwner,
		&i.RequestedTrain,
		&i.RequestedTrainOwner,
		&i.CreatedAt,
	)
	return i, err
}

const listTradeTransactions = `-- name: ListTradeTransactions :many
SELECT id, offered_train, offered_train_owner, requested_train, requested_train_owner, created_at FROM trade_transactions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTradeTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTradeTransactions(ctx context.Context, arg ListTradeTransactionsParams) ([]TradeTransaction, error) {
	rows, err := q.db.QueryContext(ctx, listTradeTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TradeTransaction{}
	for rows.Next() {
		var i TradeTransaction
		if err := rows.Scan(
			&i.ID,
			&i.OfferedTrain,
			&i.OfferedTrainOwner,
			&i.RequestedTrain,
			&i.RequestedTrainOwner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrainTradeTransactions = `-- name: ListTrainTradeTransactions :many
SELECT id, offered_train, offered_train_owner, requested_train, requested_train_owner, created_at FROM trade_transactions
WHERE offered_train = $1 
OR requested_train = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTrainTradeTransactionsParams struct {
	OfferedTrain   int64 `json:"offered_train"`
	RequestedTrain int64 `json:"requested_train"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListTrainTradeTransactions(ctx context.Context, arg ListTrainTradeTransactionsParams) ([]TradeTransaction, error) {
	rows, err := q.db.QueryContext(ctx, listTrainTradeTransactions,
		arg.OfferedTrain,
		arg.RequestedTrain,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TradeTransaction{}
	for rows.Next() {
		var i TradeTransaction
		if err := rows.Scan(
			&i.ID,
			&i.OfferedTrain,
			&i.OfferedTrainOwner,
			&i.RequestedTrain,
			&i.RequestedTrainOwner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserTradeTransactions = `-- name: ListUserTradeTransactions :many
SELECT id, offered_train, offered_train_owner, requested_train, requested_train_owner, created_at FROM trade_transactions
WHERE offered_train_owner = $1 
OR requested_train_owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUserTradeTransactionsParams struct {
	OfferedTrainOwner int64 `json:"offered_train_owner"`
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
}

func (q *Queries) ListUserTradeTransactions(ctx context.Context, arg ListUserTradeTransactionsParams) ([]TradeTransaction, error) {
	rows, err := q.db.QueryContext(ctx, listUserTradeTransactions, arg.OfferedTrainOwner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TradeTransaction{}
	for rows.Next() {
		var i TradeTransaction
		if err := rows.Scan(
			&i.ID,
			&i.OfferedTrain,
			&i.OfferedTrainOwner,
			&i.RequestedTrain,
			&i.RequestedTrainOwner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
