// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users
SET activated = true
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, activateUser, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  email, first_name
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, email, first_name, hashed_password, activated, password_changed_at, version, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword []byte `json:"hashed_password"`
	Email          string `json:"email"`
	FirstName      string `json:"first_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.FirstName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.HashedPassword,
		&i.Activated,
		&i.PasswordChangedAt,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE from users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, first_name, hashed_password, activated, password_changed_at, version, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.HashedPassword,
		&i.Activated,
		&i.PasswordChangedAt,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, first_name, hashed_password, activated, password_changed_at, version, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.HashedPassword,
		&i.Activated,
		&i.PasswordChangedAt,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, first_name, hashed_password, activated, password_changed_at, version, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.HashedPassword,
			&i.Activated,
			&i.PasswordChangedAt,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users
SET
  hashed_password = $1,
  password_changed_at = $2
WHERE
  username = $3
RETURNING id, username, email, first_name, hashed_password, activated, password_changed_at, version, created_at
`

type UpdatePasswordParams struct {
	HashedPassword    []byte    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	Username          string    `json:"username"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.HashedPassword, arg.PasswordChangedAt, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.HashedPassword,
		&i.Activated,
		&i.PasswordChangedAt,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  email = COALESCE($1, email),
  first_name = COALESCE($2, first_name)
WHERE
  username = $3
RETURNING id, username, email, first_name, hashed_password, activated, password_changed_at, version, created_at
`

type UpdateUserParams struct {
	Email     sql.NullString `json:"email"`
	FirstName sql.NullString `json:"first_name"`
	Username  string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.FirstName, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.HashedPassword,
		&i.Activated,
		&i.PasswordChangedAt,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}
