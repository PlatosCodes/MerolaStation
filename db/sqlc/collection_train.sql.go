// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: collection_train.sql

package db

import (
	"context"
	"time"
)

const createCollectionTrain = `-- name: CreateCollectionTrain :one
INSERT INTO collection_trains (
  user_id,
  train_id
) VALUES (
  $1, $2
) RETURNING id, user_id, train_id, created_at, times_traded
`

type CreateCollectionTrainParams struct {
	UserID  int64 `json:"user_id"`
	TrainID int64 `json:"train_id"`
}

func (q *Queries) CreateCollectionTrain(ctx context.Context, arg CreateCollectionTrainParams) (CollectionTrain, error) {
	row := q.db.QueryRowContext(ctx, createCollectionTrain, arg.UserID, arg.TrainID)
	var i CollectionTrain
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrainID,
		&i.CreatedAt,
		&i.TimesTraded,
	)
	return i, err
}

const deleteCollectionTrain = `-- name: DeleteCollectionTrain :exec
DELETE from collection_trains WHERE user_id = $1 AND train_id = $2
`

type DeleteCollectionTrainParams struct {
	UserID  int64 `json:"user_id"`
	TrainID int64 `json:"train_id"`
}

func (q *Queries) DeleteCollectionTrain(ctx context.Context, arg DeleteCollectionTrainParams) error {
	_, err := q.db.ExecContext(ctx, deleteCollectionTrain, arg.UserID, arg.TrainID)
	return err
}

const getCollectionTrain = `-- name: GetCollectionTrain :one
SELECT id, user_id, train_id, created_at, times_traded FROM collection_trains
WHERE user_id = $1 AND train_id = $2
LIMIT 1
`

type GetCollectionTrainParams struct {
	UserID  int64 `json:"user_id"`
	TrainID int64 `json:"train_id"`
}

func (q *Queries) GetCollectionTrain(ctx context.Context, arg GetCollectionTrainParams) (CollectionTrain, error) {
	row := q.db.QueryRowContext(ctx, getCollectionTrain, arg.UserID, arg.TrainID)
	var i CollectionTrain
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrainID,
		&i.CreatedAt,
		&i.TimesTraded,
	)
	return i, err
}

const getCollectionTrainByID = `-- name: GetCollectionTrainByID :one
SELECT id, user_id, train_id, created_at, times_traded FROM collection_trains
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCollectionTrainByID(ctx context.Context, id int64) (CollectionTrain, error) {
	row := q.db.QueryRowContext(ctx, getCollectionTrainByID, id)
	var i CollectionTrain
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrainID,
		&i.CreatedAt,
		&i.TimesTraded,
	)
	return i, err
}

const getCollectionTrainforUpdate = `-- name: GetCollectionTrainforUpdate :one
SELECT id, user_id, train_id, created_at, times_traded FROM collection_trains
WHERE user_id = $1 AND train_id = $2
LIMIT 1
FOR NO KEY UPDATE
`

type GetCollectionTrainforUpdateParams struct {
	UserID  int64 `json:"user_id"`
	TrainID int64 `json:"train_id"`
}

func (q *Queries) GetCollectionTrainforUpdate(ctx context.Context, arg GetCollectionTrainforUpdateParams) (CollectionTrain, error) {
	row := q.db.QueryRowContext(ctx, getCollectionTrainforUpdate, arg.UserID, arg.TrainID)
	var i CollectionTrain
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrainID,
		&i.CreatedAt,
		&i.TimesTraded,
	)
	return i, err
}

const getCollectionTrainforUpdateByID = `-- name: GetCollectionTrainforUpdateByID :one
SELECT id, user_id, train_id, created_at, times_traded FROM collection_trains
WHERE id = $1
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCollectionTrainforUpdateByID(ctx context.Context, id int64) (CollectionTrain, error) {
	row := q.db.QueryRowContext(ctx, getCollectionTrainforUpdateByID, id)
	var i CollectionTrain
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrainID,
		&i.CreatedAt,
		&i.TimesTraded,
	)
	return i, err
}

const getUserCollectionWithWishlistStatus = `-- name: GetUserCollectionWithWishlistStatus :many
SELECT 
    c.id, c.user_id, c.train_id, c.created_at, c.times_traded,
    CASE WHEN w.train_id IS NULL THEN false ELSE true END AS is_in_wishlist
FROM collection_trains c
LEFT JOIN wishlist_trains w ON c.train_id = w.train_id AND w.user_id = c.user_id
WHERE c.user_id = $1
`

type GetUserCollectionWithWishlistStatusRow struct {
	ID           int64     `json:"id"`
	UserID       int64     `json:"user_id"`
	TrainID      int64     `json:"train_id"`
	CreatedAt    time.Time `json:"created_at"`
	TimesTraded  int64     `json:"times_traded"`
	IsInWishlist bool      `json:"is_in_wishlist"`
}

func (q *Queries) GetUserCollectionWithWishlistStatus(ctx context.Context, userID int64) ([]GetUserCollectionWithWishlistStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserCollectionWithWishlistStatus, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserCollectionWithWishlistStatusRow{}
	for rows.Next() {
		var i GetUserCollectionWithWishlistStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrainID,
			&i.CreatedAt,
			&i.TimesTraded,
			&i.IsInWishlist,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCollectionTrains = `-- name: ListCollectionTrains :many
SELECT id, user_id, train_id, created_at, times_traded FROM collection_trains
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type ListCollectionTrainsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCollectionTrains(ctx context.Context, arg ListCollectionTrainsParams) ([]CollectionTrain, error) {
	rows, err := q.db.QueryContext(ctx, listCollectionTrains, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CollectionTrain{}
	for rows.Next() {
		var i CollectionTrain
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrainID,
			&i.CreatedAt,
			&i.TimesTraded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserCollection = `-- name: ListUserCollection :many
SELECT id, user_id, train_id, created_at, times_traded FROM collection_trains
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUserCollectionParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserCollection(ctx context.Context, arg ListUserCollectionParams) ([]CollectionTrain, error) {
	rows, err := q.db.QueryContext(ctx, listUserCollection, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CollectionTrain{}
	for rows.Next() {
		var i CollectionTrain
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrainID,
			&i.CreatedAt,
			&i.TimesTraded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserTrains = `-- name: ListUserTrains :many
SELECT 
    trains.id, trains.model_number, trains.name, trains.value, trains.img_url, trains.created_at, trains.version, trains.last_edited_at, 
    CASE WHEN collection_trains.train_id IS NULL THEN FALSE ELSE TRUE END AS is_in_collection,
    CASE WHEN wishlist_trains.train_id IS NULL THEN FALSE ELSE TRUE END AS is_in_wishlist
FROM 
    trains 
LEFT JOIN 
    collection_trains ON trains.id = collection_trains.train_id AND collection_trains.user_id = $1
LEFT JOIN
    wishlist_trains ON trains.id = wishlist_trains.train_id AND wishlist_trains.user_id = $1
ORDER BY 
    trains.id
LIMIT $2 
OFFSET $3
`

type ListUserTrainsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUserTrainsRow struct {
	ID             int64     `json:"id"`
	ModelNumber    string    `json:"model_number"`
	Name           string    `json:"name"`
	Value          int64     `json:"value"`
	ImgUrl         string    `json:"img_url"`
	CreatedAt      time.Time `json:"created_at"`
	Version        int64     `json:"version"`
	LastEditedAt   time.Time `json:"last_edited_at"`
	IsInCollection bool      `json:"is_in_collection"`
	IsInWishlist   bool      `json:"is_in_wishlist"`
}

func (q *Queries) ListUserTrains(ctx context.Context, arg ListUserTrainsParams) ([]ListUserTrainsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserTrains, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserTrainsRow{}
	for rows.Next() {
		var i ListUserTrainsRow
		if err := rows.Scan(
			&i.ID,
			&i.ModelNumber,
			&i.Name,
			&i.Value,
			&i.ImgUrl,
			&i.CreatedAt,
			&i.Version,
			&i.LastEditedAt,
			&i.IsInCollection,
			&i.IsInWishlist,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollectionTrain = `-- name: UpdateCollectionTrain :one
UPDATE collection_trains 
SET user_id = $2, times_traded = times_traded + 1
WHERE id = $1
RETURNING id, user_id, train_id, created_at, times_traded
`

type UpdateCollectionTrainParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) UpdateCollectionTrain(ctx context.Context, arg UpdateCollectionTrainParams) (CollectionTrain, error) {
	row := q.db.QueryRowContext(ctx, updateCollectionTrain, arg.ID, arg.UserID)
	var i CollectionTrain
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrainID,
		&i.CreatedAt,
		&i.TimesTraded,
	)
	return i, err
}
