// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: train.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createImageTrain = `-- name: CreateImageTrain :one
INSERT INTO trains (
  model_number,
  name,
  img_url
) VALUES (
  $1, $2, $3
) RETURNING id, model_number, name, value, img_url, created_at, version, last_edited_at
`

type CreateImageTrainParams struct {
	ModelNumber string `json:"model_number"`
	Name        string `json:"name"`
	ImgUrl      string `json:"img_url"`
}

func (q *Queries) CreateImageTrain(ctx context.Context, arg CreateImageTrainParams) (Train, error) {
	row := q.db.QueryRowContext(ctx, createImageTrain, arg.ModelNumber, arg.Name, arg.ImgUrl)
	var i Train
	err := row.Scan(
		&i.ID,
		&i.ModelNumber,
		&i.Name,
		&i.Value,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.Version,
		&i.LastEditedAt,
	)
	return i, err
}

const createTrain = `-- name: CreateTrain :one
INSERT INTO trains (
  model_number,
  name
) VALUES (
  $1, $2
) RETURNING id, model_number, name, value, img_url, created_at, version, last_edited_at
`

type CreateTrainParams struct {
	ModelNumber string `json:"model_number"`
	Name        string `json:"name"`
}

func (q *Queries) CreateTrain(ctx context.Context, arg CreateTrainParams) (Train, error) {
	row := q.db.QueryRowContext(ctx, createTrain, arg.ModelNumber, arg.Name)
	var i Train
	err := row.Scan(
		&i.ID,
		&i.ModelNumber,
		&i.Name,
		&i.Value,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.Version,
		&i.LastEditedAt,
	)
	return i, err
}

const deleteTrain = `-- name: DeleteTrain :exec
DELETE from trains WHERE id = $1
`

func (q *Queries) DeleteTrain(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrain, id)
	return err
}

const getTotalTrainCount = `-- name: GetTotalTrainCount :one
SELECT COUNT(*) FROM trains
`

func (q *Queries) GetTotalTrainCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalTrainCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTrain = `-- name: GetTrain :one
SELECT id, model_number, name, value, img_url, created_at, version, last_edited_at FROM trains
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrain(ctx context.Context, id int64) (Train, error) {
	row := q.db.QueryRowContext(ctx, getTrain, id)
	var i Train
	err := row.Scan(
		&i.ID,
		&i.ModelNumber,
		&i.Name,
		&i.Value,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.Version,
		&i.LastEditedAt,
	)
	return i, err
}

const getTrainByModel = `-- name: GetTrainByModel :one
SELECT id, model_number, name, value, img_url, created_at, version, last_edited_at FROM trains
WHERE model_number = $1 LIMIT 1
`

func (q *Queries) GetTrainByModel(ctx context.Context, modelNumber string) (Train, error) {
	row := q.db.QueryRowContext(ctx, getTrainByModel, modelNumber)
	var i Train
	err := row.Scan(
		&i.ID,
		&i.ModelNumber,
		&i.Name,
		&i.Value,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.Version,
		&i.LastEditedAt,
	)
	return i, err
}

const getTrainByName = `-- name: GetTrainByName :one
SELECT id, model_number, name, value, img_url, created_at, version, last_edited_at FROM trains
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetTrainByName(ctx context.Context, name string) (Train, error) {
	row := q.db.QueryRowContext(ctx, getTrainByName, name)
	var i Train
	err := row.Scan(
		&i.ID,
		&i.ModelNumber,
		&i.Name,
		&i.Value,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.Version,
		&i.LastEditedAt,
	)
	return i, err
}

const getTrainDetail = `-- name: GetTrainDetail :one
SELECT 
    trains.id, trains.model_number, trains.name, trains.value, trains.img_url, trains.created_at, trains.version, trains.last_edited_at,
    CASE WHEN collection_trains.train_id IS NULL THEN FALSE ELSE TRUE END AS is_in_collection,
    CASE WHEN wishlist_trains.train_id IS NULL THEN FALSE ELSE TRUE END AS is_in_wishlist
FROM 
    trains 
LEFT JOIN 
    collection_trains ON trains.id = collection_trains.train_id AND collection_trains.user_id = $2
LEFT JOIN 
    wishlist_trains ON trains.id = wishlist_trains.train_id AND wishlist_trains.user_id = $2
WHERE 
    trains.id = $1 
LIMIT 1
`

type GetTrainDetailParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

type GetTrainDetailRow struct {
	ID             int64     `json:"id"`
	ModelNumber    string    `json:"model_number"`
	Name           string    `json:"name"`
	Value          int64     `json:"value"`
	ImgUrl         string    `json:"img_url"`
	CreatedAt      time.Time `json:"created_at"`
	Version        int64     `json:"version"`
	LastEditedAt   time.Time `json:"last_edited_at"`
	IsInCollection bool      `json:"is_in_collection"`
	IsInWishlist   bool      `json:"is_in_wishlist"`
}

func (q *Queries) GetTrainDetail(ctx context.Context, arg GetTrainDetailParams) (GetTrainDetailRow, error) {
	row := q.db.QueryRowContext(ctx, getTrainDetail, arg.ID, arg.UserID)
	var i GetTrainDetailRow
	err := row.Scan(
		&i.ID,
		&i.ModelNumber,
		&i.Name,
		&i.Value,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.Version,
		&i.LastEditedAt,
		&i.IsInCollection,
		&i.IsInWishlist,
	)
	return i, err
}

const listTrains = `-- name: ListTrains :many
SELECT id, model_number, name, value, img_url, created_at, version, last_edited_at FROM trains
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTrainsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTrains(ctx context.Context, arg ListTrainsParams) ([]Train, error) {
	rows, err := q.db.QueryContext(ctx, listTrains, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Train{}
	for rows.Next() {
		var i Train
		if err := rows.Scan(
			&i.ID,
			&i.ModelNumber,
			&i.Name,
			&i.Value,
			&i.ImgUrl,
			&i.CreatedAt,
			&i.Version,
			&i.LastEditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTrainsByModelNumberSuggestions = `-- name: SearchTrainsByModelNumberSuggestions :many
SELECT DISTINCT id, model_number, name
FROM trains
WHERE model_number ILIKE $1 || '%'
ORDER BY model_number
LIMIT $2
OFFSET $3
`

type SearchTrainsByModelNumberSuggestionsParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

type SearchTrainsByModelNumberSuggestionsRow struct {
	ID          int64  `json:"id"`
	ModelNumber string `json:"model_number"`
	Name        string `json:"name"`
}

func (q *Queries) SearchTrainsByModelNumberSuggestions(ctx context.Context, arg SearchTrainsByModelNumberSuggestionsParams) ([]SearchTrainsByModelNumberSuggestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchTrainsByModelNumberSuggestions, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchTrainsByModelNumberSuggestionsRow{}
	for rows.Next() {
		var i SearchTrainsByModelNumberSuggestionsRow
		if err := rows.Scan(&i.ID, &i.ModelNumber, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTrainsByNameSuggestions = `-- name: SearchTrainsByNameSuggestions :many
SELECT DISTINCT id, model_number, name
FROM trains
WHERE name ILIKE $1 || '%'
ORDER BY name
LIMIT $2
OFFSET $3
`

type SearchTrainsByNameSuggestionsParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

type SearchTrainsByNameSuggestionsRow struct {
	ID          int64  `json:"id"`
	ModelNumber string `json:"model_number"`
	Name        string `json:"name"`
}

func (q *Queries) SearchTrainsByNameSuggestions(ctx context.Context, arg SearchTrainsByNameSuggestionsParams) ([]SearchTrainsByNameSuggestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchTrainsByNameSuggestions, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchTrainsByNameSuggestionsRow{}
	for rows.Next() {
		var i SearchTrainsByNameSuggestionsRow
		if err := rows.Scan(&i.ID, &i.ModelNumber, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrainImageUrl = `-- name: UpdateTrainImageUrl :exec

UPDATE trains SET img_url = $2, version = version + 1
WHERE id = $1
`

type UpdateTrainImageUrlParams struct {
	ID     int64  `json:"id"`
	ImgUrl string `json:"img_url"`
}

// IN FUTURE WHEN UPGRADE TO PGX
// -- name: UpdateTrainsBatch :batchexec
// UPDATE trains SET value = $2 WHERE id = $1;
func (q *Queries) UpdateTrainImageUrl(ctx context.Context, arg UpdateTrainImageUrlParams) error {
	_, err := q.db.ExecContext(ctx, updateTrainImageUrl, arg.ID, arg.ImgUrl)
	return err
}

const updateTrainValue = `-- name: UpdateTrainValue :exec
UPDATE trains SET value = $2, version = version + 1
WHERE id = $1
`

type UpdateTrainValueParams struct {
	ID    int64 `json:"id"`
	Value int64 `json:"value"`
}

func (q *Queries) UpdateTrainValue(ctx context.Context, arg UpdateTrainValueParams) error {
	_, err := q.db.ExecContext(ctx, updateTrainValue, arg.ID, arg.Value)
	return err
}
