// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: activation.sql

package db

import (
	"context"
	"time"
)

const deleteActivationToken = `-- name: DeleteActivationToken :exec
DELETE from activation_tokens WHERE user_id = $1
`

func (q *Queries) DeleteActivationToken(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteActivationToken, userID)
	return err
}

const getActivationToken = `-- name: GetActivationToken :one
SELECT user_id, activation_token, is_blocked, expires_at, created_at FROM activation_tokens
WHERE activation_token = $1 LIMIT 1
`

func (q *Queries) GetActivationToken(ctx context.Context, activationToken string) (ActivationToken, error) {
	row := q.db.QueryRowContext(ctx, getActivationToken, activationToken)
	var i ActivationToken
	err := row.Scan(
		&i.UserID,
		&i.ActivationToken,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertActivationToken = `-- name: InsertActivationToken :one
INSERT INTO activation_tokens (
  user_id,
  activation_token,
  expires_at
) VALUES (
  $1, $2, $3
) RETURNING user_id, activation_token, is_blocked, expires_at, created_at
`

type InsertActivationTokenParams struct {
	UserID          int64     `json:"user_id"`
	ActivationToken string    `json:"activation_token"`
	ExpiresAt       time.Time `json:"expires_at"`
}

func (q *Queries) InsertActivationToken(ctx context.Context, arg InsertActivationTokenParams) (ActivationToken, error) {
	row := q.db.QueryRowContext(ctx, insertActivationToken, arg.UserID, arg.ActivationToken, arg.ExpiresAt)
	var i ActivationToken
	err := row.Scan(
		&i.UserID,
		&i.ActivationToken,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
