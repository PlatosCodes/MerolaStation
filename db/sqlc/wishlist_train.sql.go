// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: wishlist_train.sql

package db

import (
	"context"
)

const createWishlistTrain = `-- name: CreateWishlistTrain :one
INSERT INTO wishlist_trains (
  user_id,
  train_id
) VALUES (
  $1, $2
) RETURNING id, user_id, train_id, created_at
`

type CreateWishlistTrainParams struct {
	UserID  int64 `json:"user_id"`
	TrainID int64 `json:"train_id"`
}

func (q *Queries) CreateWishlistTrain(ctx context.Context, arg CreateWishlistTrainParams) (WishlistTrain, error) {
	row := q.db.QueryRowContext(ctx, createWishlistTrain, arg.UserID, arg.TrainID)
	var i WishlistTrain
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrainID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWishlistTrain = `-- name: DeleteWishlistTrain :exec
DELETE from wishlist_trains WHERE user_id = $1 AND train_id = $2
`

type DeleteWishlistTrainParams struct {
	UserID  int64 `json:"user_id"`
	TrainID int64 `json:"train_id"`
}

func (q *Queries) DeleteWishlistTrain(ctx context.Context, arg DeleteWishlistTrainParams) error {
	_, err := q.db.ExecContext(ctx, deleteWishlistTrain, arg.UserID, arg.TrainID)
	return err
}

const listUserWishlist = `-- name: ListUserWishlist :many
SELECT id, user_id, train_id, created_at FROM wishlist_trains
WHERE user_id = $1
LIMIT $2
OFFSET $3
`

type ListUserWishlistParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserWishlist(ctx context.Context, arg ListUserWishlistParams) ([]WishlistTrain, error) {
	rows, err := q.db.QueryContext(ctx, listUserWishlist, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WishlistTrain{}
	for rows.Next() {
		var i WishlistTrain
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrainID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWishlists = `-- name: ListWishlists :many
SELECT id, user_id, train_id, created_at FROM wishlist_trains
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type ListWishlistsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWishlists(ctx context.Context, arg ListWishlistsParams) ([]WishlistTrain, error) {
	rows, err := q.db.QueryContext(ctx, listWishlists, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WishlistTrain{}
	for rows.Next() {
		var i WishlistTrain
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrainID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
