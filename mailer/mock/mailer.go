// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PlatosCodes/MerolaStation/mailer (interfaces: IMailer)

// Package mockmailer is a generated GoMock package.
package mockmailer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIMailer is a mock of IMailer interface.
type MockIMailer struct {
	ctrl     *gomock.Controller
	recorder *MockIMailerMockRecorder
}

// MockIMailerMockRecorder is the mock recorder for MockIMailer.
type MockIMailerMockRecorder struct {
	mock *MockIMailer
}

// NewMockIMailer creates a new mock instance.
func NewMockIMailer(ctrl *gomock.Controller) *MockIMailer {
	mock := &MockIMailer{ctrl: ctrl}
	mock.recorder = &MockIMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailer) EXPECT() *MockIMailerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockIMailer) Send(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIMailerMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIMailer)(nil).Send), arg0, arg1, arg2)
}
